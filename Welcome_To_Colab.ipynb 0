{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Manasavasireddi/machine-learning/blob/main/Welcome_To_Colab.ipynb%200\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "0NQ_SNdmDUh8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "arr = np.array([1, 2, 3, 4, 5])\n",
        "print(arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M-u87c7_B_6S",
        "outputId": "c1697646-c580-4b48-9ed7-ad1cb0ecf291"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2 3 4 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "arr_squared = arr**2\n",
        "print(arr_squared)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "spLfKY-4DXsb",
        "outputId": "dd60aba8-243f-438f-dd74-6deb1b251e61"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 1  4  9 16 25]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "arr_added = arr + 5\n",
        "print(arr_added)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QU6rB6LjDgF7",
        "outputId": "bd0db75b-8551-40e0-a8ea-0f0116bb45fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 6  7  8  9 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "matrix1 = np.array([[1, 2], [3, 4]])\n",
        "matrix2 = np.array([[5, 6], [7, 8]])\n",
        "result_matrix = np.dot(matrix1, matrix2)\n",
        "print(result_matrix)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dCZssaFlDpiz",
        "outputId": "bee60c26-c50c-46d5-b5c3-9af4a8d22811"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[19 22]\n",
            " [43 50]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from scipy.integrate import quad\n",
        "def f(x):\n",
        "    return x**2\n",
        "result, error = quad(f, 0, 1)\n",
        "\n",
        "print(\"Result of integration:\", result)\n",
        "print(\"Estimated error:\", error)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FCry3U-9Dtab",
        "outputId": "6d5df078-8829-401b-95ce-d07327bd5e64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Result of integration: 0.33333333333333337\n",
            "Estimated error: 3.700743415417189e-15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "data = {'Name': ['Alice', 'Bob', 'Charlie'],\n",
        "        'Age': [25, 30, 28],\n",
        "        'City': ['New York', 'London', 'Paris']}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "print(df['Name'])\n",
        "print(df.loc[0])\n",
        "print(df.loc[0, 'Name'])\n",
        "adults = df[df['Age'] >= 25]\n",
        "mean_age_by_city = df.groupby('City')['Age'].mean()\n",
        "\n",
        "print(df)\n",
        "print(adults)\n",
        "print(mean_age_by_city)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cHp7GEv1E-pV",
        "outputId": "96fc6048-c8af-4f14-88b9-c501805d0ead"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0      Alice\n",
            "1        Bob\n",
            "2    Charlie\n",
            "Name: Name, dtype: object\n",
            "Name       Alice\n",
            "Age           25\n",
            "City    New York\n",
            "Name: 0, dtype: object\n",
            "Alice\n",
            "      Name  Age      City\n",
            "0    Alice   25  New York\n",
            "1      Bob   30    London\n",
            "2  Charlie   28     Paris\n",
            "      Name  Age      City\n",
            "0    Alice   25  New York\n",
            "1      Bob   30    London\n",
            "2  Charlie   28     Paris\n",
            "City\n",
            "London      30.0\n",
            "New York    25.0\n",
            "Paris       28.0\n",
            "Name: Age, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "# Sample data (using Pandas)\n",
        "data = {'Name': ['Alice', 'Bob', 'Charlie'],\n",
        "        'Age': [25, 30, 28],\n",
        "        'Score': [85, 92, 78]}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Line plot\n",
        "plt.plot(df['Name'], df['Score'])\n",
        "plt.xlabel('Name')\n",
        "plt.ylabel('Score')\n",
        "plt.title('Student Scores')\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "5W1wKNJsFwsO",
        "outputId": "24956b49-42fb-475b-b1d4-7cd5a0809780"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Scatter plot\n",
        "plt.scatter(df['Age'], df['Score'])\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('Score')\n",
        "plt.title('Age vs. Score')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "hZ1KkO1qF6W1",
        "outputId": "8b46836c-6cc9-4d9e-83b0-a11958ee1e1b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Bar chart\n",
        "plt.bar(df['Name'], df['Score'])\n",
        "plt.xlabel('Name')\n",
        "plt.ylabel('Score')\n",
        "plt.title('Student Scores')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "KMKhvysrF_o8",
        "outputId": "8421aefe-7a5b-4d1e-98f9-468e05cf3577"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Histograms\n",
        "plt.hist(df['Age'], bins=3)\n",
        "plt.xlabel(\"Age\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.title(\"Distribution of Ages\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "Fp8jNtjFGCys",
        "outputId": "537cc603-8b8d-4bce-c28f-e631f561433c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjcAAAHHCAYAAABDUnkqAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAANKRJREFUeJzt3X2czXX+//HnMebC1QwaZgzDWKSLcU2aEGUyRURa0gVNlETJ2C1TYtVmbC2plZR1kdIarMoukcbFpqYVGmo3F+MiylywmDFDgznv3x/9nG/HDGaOY87Mu8f9dvvcbp33eX/en9d5307Ns8/n/fkchzHGCAAAwBKVfF0AAACANxFuAACAVQg3AADAKoQbAABgFcINAACwCuEGAABYhXADAACsQrgBAABWIdwAAACrEG6ACu4Pf/iDHA5HmRyrW7du6tatm+v1+vXr5XA4tHTp0jI5/kMPPaSoqKgyOZan8vLyNGzYMIWHh8vhcOipp57ydUnArw7hBihH5s+fL4fD4dqCgoIUERGhuLg4vf766zpx4oRXjnPo0CH94Q9/UFpamlfG86byXFtJTJ48WfPnz9eIESP07rvv6sEHH7zkPoWFhYqIiJDD4dDHH39cBlUCdqvs6wIAFPXCCy+ocePGOnPmjDIzM7V+/Xo99dRTmjZtmpYvX66WLVu6+o4fP17jxo0r1fiHDh3SpEmTFBUVpdatW5d4v08++aRUx/HExWqbPXu2nE7nFa/hcqxdu1Y33nijJk6cWKp9MjIyFBUVpYULF+qOO+64ghUC9iPcAOXQHXfcofbt27teJyYmau3atbrzzjvVp08ffffdd6pSpYokqXLlyqpc+cr+q3zy5ElVrVpVAQEBV/Q4l+Lv7+/T45dEdna2rrvuulLt895776lt27YaMmSInn32WeXn56tatWpXqELAflyWAiqIW2+9Vc8//7y+//57vffee6724tbcrFmzRp07d1bNmjVVvXp1NW/eXM8++6ykn9fJdOjQQZIUHx/vugQ2f/58ST+vq4mOjtaWLVt08803q2rVqq59z19zc05hYaGeffZZhYeHq1q1aurTp48OHjzo1icqKkoPPfRQkX1/OealaituzU1+fr7Gjh2ryMhIBQYGqnnz5vrzn/8sY4xbP4fDoVGjRunDDz9UdHS0AgMDdf3112vVqlXFT/h5srOzNXToUIWFhSkoKEitWrXSO++843r/3Pqjffv2acWKFa7a9+/ff9FxT506pQ8++ED33nuvBgwYoFOnTumjjz4qtu+SJUt03XXXKSgoSNHR0frggw+KnROn06np06fr+uuvV1BQkMLCwjR8+HAdO3bMrd/mzZsVFxen0NBQValSRY0bN9bDDz9covkAyjPO3AAVyIMPPqhnn31Wn3zyiR555JFi+/znP//RnXfeqZYtW+qFF15QYGCg0tPT9fnnn0uSrr32Wr3wwguaMGGCHn30UXXp0kWSdNNNN7nG+N///qc77rhD9957rx544AGFhYVdtK6XXnpJDodDzzzzjLKzszV9+nTFxsYqLS3NdYapJEpS2y8ZY9SnTx+tW7dOQ4cOVevWrbV69Wr9/ve/148//qhXX33Vrf/GjRu1bNkyPf7446pRo4Zef/119e/fXwcOHNBVV111wbpOnTqlbt26KT09XaNGjVLjxo21ZMkSPfTQQzp+/LhGjx6ta6+9Vu+++67GjBmjBg0aaOzYsZKkOnXqXPQzL1++XHl5ebr33nsVHh6ubt26aeHChbrvvvvc+q1YsUIDBw5UixYtlJSUpGPHjmno0KGqX79+kTGHDx+u+fPnKz4+Xk8++aT27dunGTNm6Ouvv9bnn38uf39/ZWdnq0ePHqpTp47GjRunmjVrav/+/Vq2bNlF6wUqBAOg3Jg3b56RZL766qsL9gkJCTFt2rRxvZ44caL55b/Kr776qpFkDh8+fMExvvrqKyPJzJs3r8h7Xbt2NZLMrFmzin2va9eurtfr1q0zkkz9+vVNbm6uq33x4sVGknnttddcbY0aNTJDhgy55JgXq23IkCGmUaNGrtcffvihkWT++Mc/uvW75557jMPhMOnp6a42SSYgIMCtbdu2bUaS+ctf/lLkWL80ffp0I8m89957rrbTp0+bmJgYU716dbfP3qhRI9OrV6+LjvdLd955p+nUqZPr9dtvv20qV65ssrOz3fq1aNHCNGjQwJw4ccLVtn79eiPJbU4+++wzI8ksXLjQbf9Vq1a5tX/wwQeX/K4BFRWXpYAKpnr16he9a6pmzZqSpI8++sjjxbeBgYGKj48vcf/BgwerRo0artf33HOP6tWrp5UrV3p0/JJauXKl/Pz89OSTT7q1jx07VsaYIncexcbGqkmTJq7XLVu2VHBwsPbu3XvJ44SHh2vQoEGuNn9/fz355JPKy8vThg0bPKr/f//7n1avXu02bv/+/eVwOLR48WJX26FDh/TNN99o8ODBql69uqu9a9euatGihduYS5YsUUhIiG677TYdOXLEtbVr107Vq1fXunXrJP3f9+Sf//ynzpw541H9QHlFuAEqmLy8PLcgcb6BAweqU6dOGjZsmMLCwnTvvfdq8eLFpQo69evXL9Xi4WbNmrm9djgcatq06SXXm1yu77//XhEREUXm49prr3W9/0sNGzYsMkatWrWKrEUp7jjNmjVTpUru/8m80HFKKjk5WWfOnFGbNm2Unp6u9PR0HT16VB07dtTChQvdji9JTZs2LTLG+W27d+9WTk6O6tatqzp16rhteXl5ys7OlvRzMOrfv78mTZqk0NBQ3XXXXZo3b54KCgo8+ixAecKaG6AC+eGHH5STk1PsH7lzqlSpon/9619at26dVqxYoVWrVik5OVm33nqrPvnkE/n5+V3yOKVZJ1NSF3rQYGFhYYlq8oYLHcect/i4rJwLMJ06dSr2/b179+o3v/lNqcZ0Op2qW7euWzj6pXNrgM49fPHLL7/UP/7xD61evVoPP/ywpk6dqi+//NLtDBFQ0RBugArk3XfflSTFxcVdtF+lSpXUvXt3de/eXdOmTdPkyZP13HPPad26dYqNjfX6E413797t9toYo/T0dLfn8dSqVUvHjx8vsu/333/v9ge8NLU1atRIn376qU6cOOF29mbHjh2u972hUaNG2r59u5xOp9vZm8s5zr59+/TFF19o1KhR6tq1q9t7TqdTDz74oN5//32NHz/eNX56enqRcc5va9KkiT799FN16tSpRCH1xhtv1I033qiXXnpJ77//vu6//34tWrRIw4YNK/VnAsoLLksBFcTatWv14osvqnHjxrr//vsv2O/o0aNF2s49DO/cJYdzz1ApLmx4YsGCBW7rgJYuXaqMjAy3h9E1adJEX375pU6fPu1q++c//1nklvHS1NazZ08VFhZqxowZbu2vvvqqHA6H1x6G17NnT2VmZio5OdnVdvbsWf3lL39R9erVi4STkjh3ZuXpp5/WPffc47YNGDBAXbt2dfWJiIhQdHS0FixYoLy8PNcYGzZs0DfffOM27oABA1RYWKgXX3yxyDHPnj3rmtdjx44VOWN1/vcEqKg4cwOUQx9//LF27Nihs2fPKisr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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "dataset=pd.read_csv('/content/placementdata (1).csv')"
      ],
      "metadata": {
        "id": "H6z46lf3GI2c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "ToAGW34XIlKN",
        "outputId": "b65a91f0-34e1-4230-b4ee-2533f2ae1067"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   StudentID  CGPA  Internships  Projects  Workshops/Certifications  \\\n",
              "0          1   7.5            1         1                         1   \n",
              "1          2   8.9            0         3                         2   \n",
              "2          3   7.3            1         2                         2   \n",
              "3          4   7.5            1         1                         2   \n",
              "4          5   8.3            1         2                         2   \n",
              "\n",
              "   AptitudeTestScore  SoftSkillsRating ExtracurricularActivities  \\\n",
              "0                 65               4.4                        No   \n",
              "1                 90               4.0                       Yes   \n",
              "2                 82               4.8                       Yes   \n",
              "3                 85               4.4                       Yes   \n",
              "4                 86               4.5                       Yes   \n",
              "\n",
              "  PlacementTraining  SSC_Marks  HSC_Marks PlacementStatus  \n",
              "0                No         61         79       NotPlaced  \n",
              "1               Yes         78         82          Placed  \n",
              "2                No         79         80       NotPlaced  \n",
              "3               Yes         81         80          Placed  \n",
              "4               Yes         74         88          Placed  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-46bbfb7b-a214-4451-b66c-59b10f4bc170\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>StudentID</th>\n",
              "      <th>CGPA</th>\n",
              "      <th>Internships</th>\n",
              "      <th>Projects</th>\n",
              "      <th>Workshops/Certifications</th>\n",
              "      <th>AptitudeTestScore</th>\n",
              "      <th>SoftSkillsRating</th>\n",
              "      <th>ExtracurricularActivities</th>\n",
              "      <th>PlacementTraining</th>\n",
              "      <th>SSC_Marks</th>\n",
              "      <th>HSC_Marks</th>\n",
              "      <th>PlacementStatus</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>7.5</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>65</td>\n",
              "      <td>4.4</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>61</td>\n",
              "      <td>79</td>\n",
              "      <td>NotPlaced</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>8.9</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>90</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>78</td>\n",
              "      <td>82</td>\n",
              "      <td>Placed</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>7.3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>82</td>\n",
              "      <td>4.8</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>79</td>\n",
              "      <td>80</td>\n",
              "      <td>NotPlaced</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>7.5</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>85</td>\n",
              "      <td>4.4</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>81</td>\n",
              "      <td>80</td>\n",
              "      <td>Placed</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>8.3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>86</td>\n",
              "      <td>4.5</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>74</td>\n",
              "      <td>88</td>\n",
              "      <td>Placed</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46bbfb7b-a214-4451-b66c-59b10f4bc170')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-46bbfb7b-a214-4451-b66c-59b10f4bc170 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-46bbfb7b-a214-4451-b66c-59b10f4bc170');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d01cfac7-d472-4b5b-920b-90dc1e89e11b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d01cfac7-d472-4b5b-920b-90dc1e89e11b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d01cfac7-d472-4b5b-920b-90dc1e89e11b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"StudentID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2886,\n        \"min\": 1,\n        \"max\": 10000,\n        \"num_unique_values\": 10000,\n        \"samples\": [\n          6253,\n          4685,\n          1732\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CGPA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6401312495900275,\n        \"min\": 6.5,\n        \"max\": 9.1,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          7.9,\n          7.6,\n          7.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Internships\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Projects\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Workshops/Certifications\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AptitudeTestScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 60,\n        \"max\": 90,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          69,\n          77,\n          62\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SoftSkillsRating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.41162223176862817,\n        \"min\": 3.0,\n        \"max\": 4.8,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          4.4,\n          3.5,\n          3.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ExtracurricularActivities\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PlacementTraining\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SSC_Marks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 55,\n        \"max\": 90,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          89,\n          63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HSC_Marks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 57,\n        \"max\": 88,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          59,\n          69\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PlacementStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Placed\",\n          \"NotPlaced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cJYKgMrlImhV",
        "outputId": "8402dbc0-95e8-431a-d933-01f933af8063"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(10000, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.isnull()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "eYluhJKLIqW8",
        "outputId": "7ddb0395-d352-41cb-d80e-8f20336642c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      StudentID   CGPA  Internships  Projects  Workshops/Certifications  \\\n",
              "0         False  False        False     False                     False   \n",
              "1         False  False        False     False                     False   \n",
              "2         False  False        False     False                     False   \n",
              "3         False  False        False     False                     False   \n",
              "4         False  False        False     False                     False   \n",
              "...         ...    ...          ...       ...                       ...   \n",
              "9995      False  False        False     False                     False   \n",
              "9996      False  False        False     False                     False   \n",
              "9997      False  False        False     False                     False   \n",
              "9998      False  False        False     False                     False   \n",
              "9999      False  False        False     False                     False   \n",
              "\n",
              "      AptitudeTestScore  SoftSkillsRating  ExtracurricularActivities  \\\n",
              "0                 False             False                      False   \n",
              "1                 False             False                      False   \n",
              "2                 False             False                      False   \n",
              "3                 False             False                      False   \n",
              "4                 False             False                      False   \n",
              "...                 ...               ...                        ...   \n",
              "9995              False             False                      False   \n",
              "9996              False             False                      False   \n",
              "9997              False             False                      False   \n",
              "9998              False             False                      False   \n",
              "9999              False             False                      False   \n",
              "\n",
              "      PlacementTraining  SSC_Marks  HSC_Marks  PlacementStatus  \n",
              "0                 False      False      False            False  \n",
              "1                 False      False      False            False  \n",
              "2                 False      False      False            False  \n",
              "3                 False      False      False            False  \n",
              "4                 False      False      False            False  \n",
              "...                 ...        ...        ...              ...  \n",
              "9995              False      False      False            False  \n",
              "9996              False      False      False            False  \n",
              "9997              False      False      False            False  \n",
              "9998              False      False      False            False  \n",
              "9999              False      False      False            False  \n",
              "\n",
              "[10000 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-01def5e0-0f7d-40ec-96e9-53a24bf14f37\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>StudentID</th>\n",
              "      <th>CGPA</th>\n",
              "      <th>Internships</th>\n",
              "      <th>Projects</th>\n",
              "      <th>Workshops/Certifications</th>\n",
              "      <th>AptitudeTestScore</th>\n",
              "      <th>SoftSkillsRating</th>\n",
              "      <th>ExtracurricularActivities</th>\n",
              "      <th>PlacementTraining</th>\n",
              "      <th>SSC_Marks</th>\n",
              "      <th>HSC_Marks</th>\n",
              "      <th>PlacementStatus</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9995</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9996</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9997</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9998</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10000 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-01def5e0-0f7d-40ec-96e9-53a24bf14f37')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-01def5e0-0f7d-40ec-96e9-53a24bf14f37 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-01def5e0-0f7d-40ec-96e9-53a24bf14f37');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6de16d9a-2ac1-4fa5-9886-586e90f0a37f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6de16d9a-2ac1-4fa5-9886-586e90f0a37f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6de16d9a-2ac1-4fa5-9886-586e90f0a37f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"StudentID\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CGPA\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Internships\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Projects\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Workshops/Certifications\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AptitudeTestScore\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SoftSkillsRating\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ExtracurricularActivities\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PlacementTraining\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SSC_Marks\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HSC_Marks\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PlacementStatus\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "i7ntOZjuItit",
        "outputId": "543bffd7-996f-43e3-e59e-c176bac08ae1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "StudentID                    0\n",
              "CGPA                         0\n",
              "Internships                  0\n",
              "Projects                     0\n",
              "Workshops/Certifications     0\n",
              "AptitudeTestScore            0\n",
              "SoftSkillsRating             0\n",
              "ExtracurricularActivities    0\n",
              "PlacementTraining            0\n",
              "SSC_Marks                    0\n",
              "HSC_Marks                    0\n",
              "PlacementStatus              0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>StudentID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CGPA</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Internships</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Projects</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Workshops/Certifications</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AptitudeTestScore</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SoftSkillsRating</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ExtracurricularActivities</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PlacementTraining</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SSC_Marks</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>HSC_Marks</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PlacementStatus</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import pandas as pd\n",
        "\n",
        "# Load the dataset (assuming it's a CSV file)\n",
        "dataset = pd.read_csv('/content/placementdata (1).csv')\n",
        "\n",
        "fig, ax=plt.subplots(figsize=(2,2))\n",
        "sns.histplot(dataset.CGPA)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 251
        },
        "id": "ipxSPYqyIw2F",
        "outputId": "e3c3cd95-0b3e-4bd6-e479-473b525efbaf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='CGPA', ylabel='Count'>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['CGPA'] = dataset['CGPA'].fillna(dataset['CGPA'].mean())"
      ],
      "metadata": {
        "id": "etEobyRdI1Y9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "0ECS0q0KJRPF",
        "outputId": "a3c0b248-14b4-42d6-ce53-5b15fc55f58c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "StudentID                    0\n",
              "CGPA                         0\n",
              "Internships                  0\n",
              "Projects                     0\n",
              "Workshops/Certifications     0\n",
              "AptitudeTestScore            0\n",
              "SoftSkillsRating             0\n",
              "ExtracurricularActivities    0\n",
              "PlacementTraining            0\n",
              "SSC_Marks                    0\n",
              "HSC_Marks                    0\n",
              "PlacementStatus              0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>StudentID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CGPA</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Internships</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Projects</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Workshops/Certifications</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AptitudeTestScore</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SoftSkillsRating</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ExtracurricularActivities</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PlacementTraining</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SSC_Marks</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>HSC_Marks</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PlacementStatus</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['CGPA'] = dataset['CGPA'].fillna(dataset['CGPA'].median())"
      ],
      "metadata": {
        "id": "iiJwZSOFJjcN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['CGPA'] = dataset['CGPA'].fillna(dataset['CGPA'].mode())"
      ],
      "metadata": {
        "id": "f9rnEriyJupe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "CGPA_dataset= pd.read_csv('/content/placementdata (1).csv')"
      ],
      "metadata": {
        "id": "VICAoa2RJ3D9"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "name": "Welcome To Colab",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}